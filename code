import cv2
import numpy as np
import mediapipe as mp

# MediaPipe 초기 설정
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# 3D 각도 계산 함수
def calculate_angle_3d(a, b, c):
    a, b, c = np.array(a), np.array(b), np.array(c)
    ba = a - b
    bc = c - b
    cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc) + 1e-6)
    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
    return np.degrees(angle)

# 랜드마크 좌표 추출 함수
def get_landmark_coords(landmarks, name):
    lm = mp_pose.PoseLandmark[name]
    point = landmarks[lm.value]
    return [point.x, point.y, point.z]

# 발차기 유형 분류 함수
def classify_kick(knee_angle, hip_angle, ankle_y, shoulder_y):
    if ankle_y < shoulder_y and knee_angle > 160:
        return "Front Kick"
    elif ankle_y >= shoulder_y and knee_angle > 160:
        return "Side Kick"
    elif knee_angle < 140 and hip_angle < 120:
        return "Roundhouse Kick"
    elif hip_angle > 160 and knee_angle > 160:
        return "Back Kick"
    elif ankle_y < shoulder_y and knee_angle < 140:
        return "Double Kick"
    else:
        return "Analyzing Kick..."

# 피드백 생성 함수
def give_feedback(knee_angle, ankle_y, shoulder_y):
    feedback = []
    if knee_angle < 160:
        feedback.append("Straighten your knee!")
    if ankle_y > shoulder_y:
        feedback.append("Kick your leg higher!")
    if not feedback:
        feedback.append("Great! Your posture looks good!")
    return feedback

# 자세 분석 함수
def analyze_pose(image, pose):
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    if not results.pose_landmarks:
        return image, "Analyzing Kick...", []

    landmarks = results.pose_landmarks.landmark
    left_ankle_y = landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y
    right_ankle_y = landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].y
    side = 'LEFT' if left_ankle_y < right_ankle_y else 'RIGHT'

    try:
        hip = get_landmark_coords(landmarks, f'{side}_HIP')
        knee = get_landmark_coords(landmarks, f'{side}_KNEE')
        ankle = get_landmark_coords(landmarks, f'{side}_ANKLE')
        shoulder = get_landmark_coords(landmarks, f'{side}_SHOULDER')

        knee_angle = calculate_angle_3d(hip, knee, ankle)
        hip_angle = calculate_angle_3d(shoulder, hip, knee)

        kick_type = classify_kick(knee_angle, hip_angle, ankle[1], shoulder[1])
        feedback = give_feedback(knee_angle, ankle[1], shoulder[1])

        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        return image, kick_type, feedback
    except Exception as e:
        return image, "Pose analysis error", [str(e)]

# 실시간 분석 메인 함수
def main():
    cap = cv2.VideoCapture(0)
    with mp_pose.Pose(min_detection_confidence=0.6, min_tracking_confidence=0.6) as pose:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                continue

            frame = cv2.flip(frame, 1)
            image, kick_type, feedback = analyze_pose(frame, pose)

            # 발차기 유형 출력
            cv2.putText(image, f'Kick Type: {kick_type}', (30, 50),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

            # 정확한 발차기일 때만 피드백 출력
            if kick_type != "Analyzing Kick...":
                for i, msg in enumerate(feedback):
                    cv2.putText(image, msg, (30, 100 + i * 40),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:
                cv2.putText(image, "Hold your kick posture!", (30, 100),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (200, 200, 200), 2)

            cv2.imshow('Kick Analysis', image)

            if cv2.waitKey(10) & 0xFF == 27:  # ESC 키
                break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
